#!/usr/bin/python
import sys
try:
    import numpy as np
except ImportError:
    print ('ERROR : NumPy not found')
    sys.exit()
#...
try:
    from scipy.stats import bernoulli
except ImportError:
    print ('ERROR : SciPy not found')
    sys.exit()  
#...
import getopt
sys.path.append(sys.path[0]+'/Modules/')
from prob_cond import prob_cond
from comp_emit_seg_direct import comp_emit_seg_direct
from pred import prediction
from estim import estimation

#print the inforations about the options
def usage():
    print ("""Usage:
    ./pool-hmm.py -f (or --prefix) prefix, where prefix.pileup is the name of the pileup file to be analyzed.
               -n (or --n) value, where value is the number of haplotypes in the pool.
               -R (or --region) chr:start..end, where chr is the name of a chromosome and start and end are positions on the reference genome ; this specifies the region to be analyzed in the pileup file ; by default all sites are used.
               -c (or --min-coverage) value, where value is the minimum coverage required for a site to be used in the analyzes ; default is 1. 
               -C (or --max-coverage) value, where value is the maximum coverage required for a site to be used in the analyzes ; default is 10000.
               -q (or --min-quality) value, where value is the minimum phred score required for a nucleotide to be used in the analyzes ; default is 0.
               -e (or --quality-encoding) name, where name is the format of quality scores, 'illumina' (default) or 'sanger'.
	       -a (or --ancestral-allele) value, where value can be 'unknown', 'reference', or 'provided' ; if 'provided' is used, the pileup file must have an additional 7th column providing the ancestral allele ; default is 'unknown'. 
               -r (or --ratio) value, where 1/value is the proportion of sites that are used to estimate the frequency spectrum ; default is 10.
               -t (or --theta) where value is a strating value for theta=4N*mu (N effective population size, mu per site mutation rate) for the EM algorithm estimating the frequency spectrum ; default is 0.005.
               -k (or --k) value, where value is the per site transition probability between hidden states.
               -p (or --pred) ; if this option is used, the program predicts the hidden states and generates the .emit, .pred, .stat and .post files.
               -s (or --spectrum-file) prefix2, where prefix2.spectrum provides a frequency spectrum (typically, but not necessarely, computed from earlier runs of the program) ; if this option is used, the frequency spectrum is not estimated but taken from this file.
               -E (or --emit-file) ; if this option is used, the emission probabilities of the HMM are not computed, but taken from the file prefix.segemit (or prefix_chr:start..end.emit if the --region option is used) that has been generated by a previous execution of Pool-hmm. 
               -o (or --only-spectrum) ; if this option is used, the frequency spectrum is estimated and stored in the .spectrum file, but there is no prediction of the hidden states.
               -S (or --estim) ; if this option is used, the program estimates the derived allele counts in the sample and generates the .estim file.
               -P (or --nb-process) <value>, number of processes used by the program.
               -h (or --help)""")

if __name__ == "__main__":

    #Default variables
    prefix = None
    n = None
    theta = None
    k = None
    region = None
    spectrum_file = None
    emit_file = None
    estim = None
    pred = 0
    only_spectrum = 0
    ratio = None
    minQual=1
    qualityEncoding="illumina"
    ancestral="unknown"
    minCoverage=1
    maxCoverage=1000000000
    minCount = 1

    start = None
    end = None
    nProcess = 1

    try:
        #options available by the program
        opts, args = getopt.getopt(sys.argv[1:], "f:n:R:c:q:C:e:a:r:t:k:P:Eps:oSh", [
                                                                            "prefix=",  
                                                                            "n=",
                                                                            "region=",
                                                                            "min-coverage=",
                                                                            "min-quality=",
                                                                            "max-coverage=",
                                                                            "quality-encoding=",
									    "ancestral-allele=",   
                                                                            "ratio=", 
                                                                            "theta=",
                                                                            "k=",
                                                                            "nb-process=",
                                                                            "emit-file",
                                                                            "pred", 
                                                                            "spectrum-file=",
                                                                            "only-spectrum",
                                                                            "estim",
                                                                            "help"
                                                                        ])
    except getopt.GetoptError as err:
     # print help information and exit:
        print (str(err)) # will print something like "option -a not recognized"
        usage()
        sys.exit()
    #...

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-o", "--only-spectrum"):
            only_spectrum = 1
        elif opt in("-n", "--n"):
            n = int(arg);
        elif opt in("-s", "--spectrum-file"):
            spectrum_file = arg
        elif opt in("-E", "--emit-file"):
            emit_file = 1
        elif opt in("-r", "--ratio"):
            ratio = int(arg)
        elif opt in("-t", "--theta"):
            theta = float(arg)
        elif opt in("-p", "--pred"):
            pred = 1
        elif opt in("-k", "--k"):
            k = float(arg)
        elif opt in("-R", "--region"):
            region = arg
        elif opt in("-f", "--prefix"):
            prefix = arg
        elif opt in("-c", "--min-coverage"):
            minCoverage = int(arg)
        elif opt in("-q", "--min-quality"):
            minQual = int(arg)
        elif opt in("-C", "--max-coverage"):
            maxCoverage = int(arg)
        elif opt in("-e", "--quality-encoding"):
            qualityEncoding = arg
	elif opt in("-a", "--ancestral-allele"):
	    ancestral = arg
        elif opt in("-S", "--estim"):
            estim = 1
        elif opt in ("-P", "--nb-process"):
            nProcess = int(arg)
        else:
            print ("Erreur")
            sys.exit()
        # ...
    #...

    # management of options
    if not prefix:
        print ("Provide prefix for the inpout/output files.")
        usage()
        sys.exit()
    #...

    if not n:
        print ("Provide the number of chromosomes with --n.")
        usage()
        sys.exit()
    #...

    #The prefix of the pileup. I have to stored it because of his change when the --region is specified
    pileup_prefix = prefix
    if not pred and not only_spectrum and not estim:
        print ('ERROR : Provide the option --pred or --only-spectrum or --estim.')
        sys.exit()
    #...

    if (pred or estim ) and only_spectrum:
        print ('ERROR : The --only-spectrum option can\'t be used with the --pred or --estim options.')
        sys.exit()
    #... 
        
    if only_spectrum and spectrum_file:
        print ('ERROR : --spectrum-file can be specified only for the --pred and --estim options.')
        sys.exit()
    #...
    if emit_file:
        if theta:
            print ('ERROR : --theta option can\'t be used with the --emit-file option')
            sys.exit()
        #...
        if spectrum_file:
            print ('ERROR : --spectrum_file option can\'t be used with the --emit-file option')
            sys.exit()
        #...
        if only_spectrum:
            print ('ERROR : --emit-file option can be used only with the --pred option')
            sys.exit()
    #...
    if pred:
        if not k:
            print ('ERROR : You have to provide k to use the --pred option.')
            usage()
            sys.exit()
        #...
        if not spectrum_file and not theta and not emit_file:
            print ('ERROR : You have to provide a starting value of theta to compute the Allele Frequency Spectrum.')
            usage()
            sys.exit()
        #...
        elif spectrum_file and ratio:
            print ('ERROR : --ratio option can\'t be used with the --spectrum-file option.')
            sys.exit()
    #...
    if only_spectrum: 
        if not theta:
            print ('ERROR : You have to provide a starting value of theta to compute the Allele Frequency Spectrum.')
            sys.exit()
        #...
        if k:
            print ('ERROR : --k option can\'t be used with the --only-spectrum option.')
            sys.exit()
        #...
    #...    
    
    if estim and not spectrum_file and not theta:
        print ('ERROR : You have to provide a starting value of theta to compute the Allele Frequency Spectrum.')
        sys.exit()
        #...
    elif estim and not pred and k:
        print ('Error : --k option can\'t be used with the --estim option without the --pred option')
        sys.exit()
    #...
    if spectrum_file and theta:
        print ('ERROR : --theta option can\'t be used with the --spectrum-file option.')
        sys.exit()
    
    if not ancestral == "reference" and not ancestral == "provided" and not ancestral == "unknown":
	print ('ERROR : invalid argument for -a')
	sys.exit()

    #pileup file loading
    try: 
        pileup = open(pileup_prefix + '.pileup','r')
    except IOError:
        print ("Could not open input file %s" %  (pileup_prefix + '.pileup'))
        sys.exit()
    #...

    # management of the region if it is specified with the --region option
    if region:
        chro = region.split(':')
        #if only the chromosome is specified in the region ex: --region 2L
        if len(chro) == 1:
            chro = chro[0]
            prefix += '_' + chro
            # region's parameters. 'start' end 'end' are set to 'None
            region = [chro,start,end]
        #chromosome, start and end are specified in the region ex: --region 2L:1000..2000
        else:
            zone = chro[1].split('..')
            #...
            #if more than two values are set in the --region option, the 'region is not valid' exeption is raised
            if len(chro) > 2 or len(zone) != 2:
                print ('ERROR : The --region\'s argument is not valid.')
                sys.exit()
            #...
            if zone[0].isdigit() and zone[1].isdigit():
                chro = chro[0]
                start = int(zone[0])
                end = int(zone[1])
                prefix += '_' + chro + '-' + str(start) + '..' + str(end)
                #region's parameters
                region = [chro,start,end]
                if start > end:
                    print ('ERROR : The begining of the region must be lower than the end of the region')
                    sys.exit()
            else:
                print ('ERROR : The --region\'s argument is not valid.')
                sys.exit()    
            #...
        #...

    #...

    #...
    
    #spectrum file loading.
    if spectrum_file:
        try:
            p_neutral = np.loadtxt(spectrum_file+'.spectrum', delimiter = ' ')
        except IOError:
            print (' ERROR : %s not found' % (spectrum_file + '.spectrum'))
            sys.exit()
        #...
        print('Allele Frequency Spectrum loaded.')
    #...
    
    #emit_file loading
    if emit_file:
        try:
            E = np.loadtxt(prefix + '.segemit', delimiter = ' ', usecols = (1,2,3,4))
        except IOError:
            print ('ERROR : %s.segemit not found' % (prefix))
            sys.exit()
	print('Emission probabilities loaded.')
    
    if not ratio:
        ratio = 10
    #...

    #parameters of the parser
    parser_parameters = [qualityEncoding,minQual,minCount,minCoverage,maxCoverage]

    #the start of the script
    print ('Pool-hmm : started')
    if not spectrum_file and not emit_file and (pred or only_spectrum or estim):
        print ('Computation of the likelihood of NGS data : started')
        p_neutral = prob_cond(parser_parameters,region,theta,nProcess,ratio,n,prefix,pileup_prefix,ancestral)
        print ('Computation of the likelihood of NGS data : finished')
    #...
    if not only_spectrum and pred:
        if not emit_file:
            print ('Computation of the HMM emission probabilities : started')
            comp_emit_seg_direct(parser_parameters, region, nProcess, n, prefix,p_neutral,pileup_prefix,ancestral)
            print ('Computation of the HMM emission probabilities : finished')
        #...
        print ('Selective sweep prediction : started')
        prediction(k,prefix)
        print ('Selective sweep prediction : finished')
    #...
    if estim:
        print ('Allele frequency estimation : started')
        estimation(parser_parameters, region, nProcess, n, prefix,p_neutral,pileup_prefix,ancestral)
        print ('Allele Frequency estimation : finished')
    #...
    pileup.close()
    print ('Pool-hmm : finished')
#...
